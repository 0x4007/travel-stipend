# Cline Rules: Travel Stipend Calculator

## Project Patterns

### TypeScript Conventions

- Use TypeScript for all new code.
- Maintain strict type safety with explicit interfaces.
- Prefer functional programming patterns where appropriate.
- Use async/await for asynchronous operations.

### Runtime Environment

- **Core Logic/CLI/Local Proxy:** Use Bun to run TypeScript files directly and manage dependencies.
- **Deployed Proxy:** Use Deno runtime (target: Deno Deploy).
- **Calculations:** Primarily executed within the GitHub Actions environment (Ubuntu Linux).
- Default origin location is "Seoul, Korea" unless specified otherwise via input.

### Data Processing & Persistence

- **Reference Data:** SQLite database (`db/travel-stipend.db`) stores CoL, coordinates, taxis, etc. Populated from `fixtures/*.csv`.
- **Caching:** Persistent JSON files (`fixtures/cache/`) store calculated stipends, flight prices, distances, etc., keyed by hashes of inputs.
- **Input Methods:**
    - CLI: Arguments via `commander`.
    - GitHub Actions (Push): Reads `.github/test-events.json`.
    - GitHub Actions (UI/Dispatch): Receives inputs via `workflow_dispatch` triggered by the proxy function.
- **Data Flow:** UI -> Proxy -> GitHub API -> Actions Workflow -> Calculator -> DB/Cache/Scraper -> Actions -> Proxy -> UI (via WebSocket).

### Calculation Logic

- Implement fallback mechanisms (e.g., $0 flight cost on scraper failure).
- Use Haversine formula for distance.
- Apply cost-of-living adjustments (from DB).
- Account for weekend vs. weekday lodging rates.
- Include pre/post-conference buffer days.
- Calculate allowances (internet, incidentals).

### Web Scraping Strategies

- Use Puppeteer via submodule (`src/utils/google-flights-scraper/`).
- Implement multiple approaches for element selection.
- Use screenshots (`handleScreenshot` in `src/utils/flights.ts`) for debugging, especially in Actions.
- Implement error recovery and retries (`withRetry` in `src/utils/flights.ts`).

### Output Formatting

- **CLI:** JSON, CSV, Console Table.
- **GitHub Actions:** Individual JSON artifacts per job, consolidated Markdown/JSON/CSV artifacts.
- **Web UI:** Receives consolidated JSON results via WebSocket and renders an HTML table.

## User Preferences

- **Primary Interface:** Web UI triggering GitHub Actions workflow.
- **Secondary Interfaces:** CLI for local single calculations, direct GitHub Actions triggers (push/manual).
- Focus on accuracy and leveraging the robust Actions environment for calculations.
- Maintain transparency in calculations and results display.

## Implementation Paths

### Adding New Cost Factors

1. Define factor in `src/utils/constants.ts`.
2. Add calculation logic in `src/travel-stipend-calculator.ts` or a new util.
3. Update `StipendBreakdown` type (`src/types.ts`).
4. Update result display/reporting (UI table rendering in `ui/script.ts`, consolidation script `consolidate-stipend-results.ts`, CLI output).

### Extending City Data

1. Add/update entries in `fixtures/*.csv` (coordinates, cost_of_living, taxis).
2. Consider clearing the database (`db/travel-stipend.db`) locally to force re-import on next run, or implement DB update logic.
3. Clear relevant JSON caches (`fixtures/cache/`) if calculations depend on cached versions of this data.

### Modifying UI/Proxy Flow

1. Update UI form/script (`ui/`). Remember to run `bun run build:ui`.
2. Update Proxy function (`api/trigger-workflow.ts`). Test locally with `bun run start:proxy`.
3. Update GitHub Action workflow (`batch-travel-stipend.yml`) if inputs or callback change.
4. Update relevant documentation.
5. Deploy proxy and UI changes.

## Known Challenges

- **Scraper Flakiness:** Google Flights UI changes can break scraping.
- **Proxy Deployment:** Configuring secrets (especially multi-line private key) and ensuring correct runtime environment (Deno) can be tricky.
- **Callback Security/Reliability:** Requires secure secret management and robust error handling for the Action -> Proxy communication. Network issues can prevent results reaching UI.
- **WebSocket State:** Server needs to manage client connections reliably.
- **Local Testing Callback:** GitHub Actions runners cannot easily reach `localhost` for the callback; requires workarounds like `ngrok`.
- **City Name Matching:** Sensitive to formatting.
- **Reference Data Freshness:** CoL, taxi data needs updates.

## Tool Usage Patterns

- **Runtime:** Bun (local), Deno (deployed proxy), Node.js (Actions runner).
- **Build:** Bun (`bun build`, `bun run build:ui`).
- **Testing:** Jest (`bun test`).
- **Linting/Formatting:** ESLint, Prettier, cspell.
- **Git Hooks:** Husky, lint-staged, commitlint.
- **Web Scraping:** Puppeteer.
- **Database:** SQLite (via `sqlite`, `sqlite3`).
- **Proxy Auth:** GitHub Apps (JWT via `djwt` for Deno, `jsonwebtoken` for local Bun/Node proxy), GitHub API.
- **Deployment:** Deno Deploy (preferred for proxy), Static hosting (for UI if separate).

## Project Evolution

- Initial CLI tool with distance-based flights.
- Added DB persistence for reference data.
- Added JSON caching.
- Integrated Google Flights scraper via submodule.
- Developed GitHub Actions workflow for batch processing.
- Implemented Web UI trigger architecture:
    - Static UI (`ui/`).
    - Serverless Proxy Function (`api/trigger-workflow.ts`) using Deno.
    - Switched proxy auth from PAT to GitHub App.
    - Added WebSocket communication for status/results.
    - Added Action->Proxy callback mechanism with shared secret.
- Refined UI feedback (removed local server, added status messages).
- Added key conversion script.
- Extensive troubleshooting of Actions conflicts, Deno Deploy issues, Git tracking, UI functionality.
